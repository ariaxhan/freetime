# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ..core.unchecked_base_model import UncheckedBaseModel
from .metadata import Metadata


class BrowseOutput(UncheckedBaseModel):
    message: str = pydantic_v1.Field()
    """
    The final message or result of the browsing session.
    """

    status: str = pydantic_v1.Field()
    """
    The final status of the browsing session. One of ["CONTINUE", "ASK_USER", "DONE"]
    """

    url: str = pydantic_v1.Field()
    """
    The current URL of the session.
    """

    screenshot: str = pydantic_v1.Field()
    """
    image url of the screenshot taken during the session.
    """

    session_id: str = pydantic_v1.Field()
    """
    The unique identifier for the session.
    """

    metadata: typing.Optional[Metadata] = pydantic_v1.Field(default=None)
    """
    Additional metadata for the session
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
