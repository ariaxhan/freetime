# This file was auto-generated by Fern from our API Definition.

import json
import typing
from json.decoder import JSONDecodeError

import httpx_sse

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..types.mode import Mode
from ..types.session_created import SessionCreated
from ..types.session_step_stream_chunk import SessionStepStreamChunk
from ..types.session_step_success import SessionStepSuccess
from .types.create_session_input_browser_params import CreateSessionInputBrowserParams
from .types.sessions_close_response import SessionsCloseResponse
from .types.sessions_list_response import SessionsListResponse
from .types.sessions_screenshot_response import SessionsScreenshotResponse
from .types.sessions_step_request_browser_params import SessionsStepRequestBrowserParams
from .types.sessions_step_stream_request_browser_params import SessionsStepStreamRequestBrowserParams

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SessionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        url: str,
        local: typing.Optional[bool] = OMIT,
        agent_id: typing.Optional[str] = OMIT,
        mode: typing.Optional[Mode] = OMIT,
        use_proxy: typing.Optional[bool] = OMIT,
        browser_params: typing.Optional[CreateSessionInputBrowserParams] = OMIT,
        include_screenshot: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SessionCreated:
        """
        Creates a new session and returns session details including a unique session ID. A session remains active for 10 minutes of inactivity.

        Parameters
        ----------
        url : str
            The URL to create or continue session from.

        local : typing.Optional[bool]
            Boolean flag to indicate if session to be run locally or in the cloud (Default: False). If set to true, the session will be run locally via your chrome extension. If set to false, the session will be run in the cloud.

        agent_id : typing.Optional[str]
            The agent id to use for the session.

        mode : typing.Optional[Mode]

        use_proxy : typing.Optional[bool]
            Boolean flag to use a proxy for the session (Default: False). Each Session gets a new Residential IP.

        browser_params : typing.Optional[CreateSessionInputBrowserParams]
            Object containing height and width for the browser screen size.

        include_screenshot : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionCreated
            Session successfully created

        Examples
        --------
        from multion.client import MultiOn

        client = MultiOn(
            api_key="YOUR_API_KEY",
        )
        client.sessions.create(
            url="url",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "session",
            method="POST",
            json={
                "url": url,
                "local": local,
                "agent_id": agent_id,
                "mode": mode,
                "use_proxy": use_proxy,
                "browser_params": browser_params,
                "include_screenshot": include_screenshot,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SessionCreated, construct_type(type_=SessionCreated, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def step_stream(
        self,
        session_id: str,
        *,
        cmd: str,
        url: typing.Optional[str] = OMIT,
        browser_params: typing.Optional[SessionsStepStreamRequestBrowserParams] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        agent_id: typing.Optional[str] = OMIT,
        mode: typing.Optional[Mode] = OMIT,
        include_screenshot: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[SessionStepStreamChunk]:
        """
        Allows for browsing the web using detailed natural language instructions in a step mode for a session with a given session ID

        Parameters
        ----------
        session_id : str

        cmd : str
            A specific natural language instruction for the next step.

        url : typing.Optional[str]
            The URL to create or continue session from.

        browser_params : typing.Optional[SessionsStepStreamRequestBrowserParams]
            Object containing height and width for the browser screen size.

        temperature : typing.Optional[float]
            The temperature of model

        agent_id : typing.Optional[str]
            The agent id to use for the session.

        mode : typing.Optional[Mode]

        include_screenshot : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.Iterator[SessionStepStreamChunk]


        Examples
        --------
        from multion import SessionsStepStreamRequestBrowserParams
        from multion.client import MultiOn

        client = MultiOn(
            api_key="YOUR_API_KEY",
        )
        response = client.sessions.step_stream(
            session_id="string",
            cmd="string",
            url="string",
            browser_params=SessionsStepStreamRequestBrowserParams(
                height=1.1,
                width=1.1,
            ),
            temperature=1.1,
            agent_id="string",
            mode="fast",
            include_screenshot=True,
        )
        for chunk in response:
            yield chunk
        """
        with self._client_wrapper.httpx_client.stream(
            f"session/{jsonable_encoder(session_id)}",
            method="POST",
            json={
                "cmd": cmd,
                "url": url,
                "browser_params": browser_params,
                "temperature": temperature,
                "agent_id": agent_id,
                "mode": mode,
                "include_screenshot": include_screenshot,
                "stream": True,
            },
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _event_source = httpx_sse.EventSource(_response)
                    for _sse in _event_source.iter_sse():
                        yield typing.cast(SessionStepStreamChunk, construct_type(type_=SessionStepStreamChunk, object_=json.loads(_sse.data)))  # type: ignore
                    return
                _response.read()
                if _response.status_code == 422:
                    raise UnprocessableEntityError(
                        typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                    )
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    def step(
        self,
        session_id: str,
        *,
        cmd: str,
        url: typing.Optional[str] = OMIT,
        browser_params: typing.Optional[SessionsStepRequestBrowserParams] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        agent_id: typing.Optional[str] = OMIT,
        mode: typing.Optional[Mode] = OMIT,
        include_screenshot: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SessionStepSuccess:
        """
        Allows for browsing the web using detailed natural language instructions in a step mode for a session with a given session ID

        Parameters
        ----------
        session_id : str

        cmd : str
            A specific natural language instruction for the next step.

        url : typing.Optional[str]
            The URL to create or continue session from.

        browser_params : typing.Optional[SessionsStepRequestBrowserParams]
            Object containing height and width for the browser screen size.

        temperature : typing.Optional[float]
            The temperature of model

        agent_id : typing.Optional[str]
            The agent id to use for the session.

        mode : typing.Optional[Mode]

        include_screenshot : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionStepSuccess


        Examples
        --------
        from multion.client import MultiOn

        client = MultiOn(
            api_key="YOUR_API_KEY",
        )
        client.sessions.step(
            session_id="session_id",
            cmd="cmd",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"session/{jsonable_encoder(session_id)}",
            method="POST",
            json={
                "cmd": cmd,
                "url": url,
                "browser_params": browser_params,
                "temperature": temperature,
                "agent_id": agent_id,
                "mode": mode,
                "include_screenshot": include_screenshot,
                "stream": False,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SessionStepSuccess, construct_type(type_=SessionStepSuccess, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def close(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionsCloseResponse:
        """
        Closes the session.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionsCloseResponse
            Successful Response

        Examples
        --------
        from multion.client import MultiOn

        client = MultiOn(
            api_key="YOUR_API_KEY",
        )
        client.sessions.close(
            session_id="session_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"session/{jsonable_encoder(session_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SessionsCloseResponse, construct_type(type_=SessionsCloseResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def screenshot(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionsScreenshotResponse:
        """
        Retrieve the screenshot of the session.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionsScreenshotResponse
            Successful Response

        Examples
        --------
        from multion.client import MultiOn

        client = MultiOn(
            api_key="YOUR_API_KEY",
        )
        client.sessions.screenshot(
            session_id="session_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"screenshot/{jsonable_encoder(session_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SessionsScreenshotResponse, construct_type(type_=SessionsScreenshotResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> SessionsListResponse:
        """
        Retrieve a list of active session IDs.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionsListResponse
            Successful Response

        Examples
        --------
        from multion.client import MultiOn

        client = MultiOn(
            api_key="YOUR_API_KEY",
        )
        client.sessions.list()
        """
        _response = self._client_wrapper.httpx_client.request("sessions", method="GET", request_options=request_options)
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SessionsListResponse, construct_type(type_=SessionsListResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSessionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        url: str,
        local: typing.Optional[bool] = OMIT,
        agent_id: typing.Optional[str] = OMIT,
        mode: typing.Optional[Mode] = OMIT,
        use_proxy: typing.Optional[bool] = OMIT,
        browser_params: typing.Optional[CreateSessionInputBrowserParams] = OMIT,
        include_screenshot: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SessionCreated:
        """
        Creates a new session and returns session details including a unique session ID. A session remains active for 10 minutes of inactivity.

        Parameters
        ----------
        url : str
            The URL to create or continue session from.

        local : typing.Optional[bool]
            Boolean flag to indicate if session to be run locally or in the cloud (Default: False). If set to true, the session will be run locally via your chrome extension. If set to false, the session will be run in the cloud.

        agent_id : typing.Optional[str]
            The agent id to use for the session.

        mode : typing.Optional[Mode]

        use_proxy : typing.Optional[bool]
            Boolean flag to use a proxy for the session (Default: False). Each Session gets a new Residential IP.

        browser_params : typing.Optional[CreateSessionInputBrowserParams]
            Object containing height and width for the browser screen size.

        include_screenshot : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionCreated
            Session successfully created

        Examples
        --------
        from multion.client import AsyncMultiOn

        client = AsyncMultiOn(
            api_key="YOUR_API_KEY",
        )
        await client.sessions.create(
            url="url",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "session",
            method="POST",
            json={
                "url": url,
                "local": local,
                "agent_id": agent_id,
                "mode": mode,
                "use_proxy": use_proxy,
                "browser_params": browser_params,
                "include_screenshot": include_screenshot,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SessionCreated, construct_type(type_=SessionCreated, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def step_stream(
        self,
        session_id: str,
        *,
        cmd: str,
        url: typing.Optional[str] = OMIT,
        browser_params: typing.Optional[SessionsStepStreamRequestBrowserParams] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        agent_id: typing.Optional[str] = OMIT,
        mode: typing.Optional[Mode] = OMIT,
        include_screenshot: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[SessionStepStreamChunk]:
        """
        Allows for browsing the web using detailed natural language instructions in a step mode for a session with a given session ID

        Parameters
        ----------
        session_id : str

        cmd : str
            A specific natural language instruction for the next step.

        url : typing.Optional[str]
            The URL to create or continue session from.

        browser_params : typing.Optional[SessionsStepStreamRequestBrowserParams]
            Object containing height and width for the browser screen size.

        temperature : typing.Optional[float]
            The temperature of model

        agent_id : typing.Optional[str]
            The agent id to use for the session.

        mode : typing.Optional[Mode]

        include_screenshot : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.AsyncIterator[SessionStepStreamChunk]


        Examples
        --------
        from multion import SessionsStepStreamRequestBrowserParams
        from multion.client import AsyncMultiOn

        client = AsyncMultiOn(
            api_key="YOUR_API_KEY",
        )
        response = await client.sessions.step_stream(
            session_id="string",
            cmd="string",
            url="string",
            browser_params=SessionsStepStreamRequestBrowserParams(
                height=1.1,
                width=1.1,
            ),
            temperature=1.1,
            agent_id="string",
            mode="fast",
            include_screenshot=True,
        )
        async for chunk in response:
            yield chunk
        """
        async with self._client_wrapper.httpx_client.stream(
            f"session/{jsonable_encoder(session_id)}",
            method="POST",
            json={
                "cmd": cmd,
                "url": url,
                "browser_params": browser_params,
                "temperature": temperature,
                "agent_id": agent_id,
                "mode": mode,
                "include_screenshot": include_screenshot,
                "stream": True,
            },
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _event_source = httpx_sse.EventSource(_response)
                    async for _sse in _event_source.aiter_sse():
                        yield typing.cast(SessionStepStreamChunk, construct_type(type_=SessionStepStreamChunk, object_=json.loads(_sse.data)))  # type: ignore
                    return
                await _response.aread()
                if _response.status_code == 422:
                    raise UnprocessableEntityError(
                        typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                    )
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    async def step(
        self,
        session_id: str,
        *,
        cmd: str,
        url: typing.Optional[str] = OMIT,
        browser_params: typing.Optional[SessionsStepRequestBrowserParams] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        agent_id: typing.Optional[str] = OMIT,
        mode: typing.Optional[Mode] = OMIT,
        include_screenshot: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SessionStepSuccess:
        """
        Allows for browsing the web using detailed natural language instructions in a step mode for a session with a given session ID

        Parameters
        ----------
        session_id : str

        cmd : str
            A specific natural language instruction for the next step.

        url : typing.Optional[str]
            The URL to create or continue session from.

        browser_params : typing.Optional[SessionsStepRequestBrowserParams]
            Object containing height and width for the browser screen size.

        temperature : typing.Optional[float]
            The temperature of model

        agent_id : typing.Optional[str]
            The agent id to use for the session.

        mode : typing.Optional[Mode]

        include_screenshot : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionStepSuccess


        Examples
        --------
        from multion.client import AsyncMultiOn

        client = AsyncMultiOn(
            api_key="YOUR_API_KEY",
        )
        await client.sessions.step(
            session_id="session_id",
            cmd="cmd",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"session/{jsonable_encoder(session_id)}",
            method="POST",
            json={
                "cmd": cmd,
                "url": url,
                "browser_params": browser_params,
                "temperature": temperature,
                "agent_id": agent_id,
                "mode": mode,
                "include_screenshot": include_screenshot,
                "stream": False,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SessionStepSuccess, construct_type(type_=SessionStepSuccess, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def close(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionsCloseResponse:
        """
        Closes the session.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionsCloseResponse
            Successful Response

        Examples
        --------
        from multion.client import AsyncMultiOn

        client = AsyncMultiOn(
            api_key="YOUR_API_KEY",
        )
        await client.sessions.close(
            session_id="session_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"session/{jsonable_encoder(session_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SessionsCloseResponse, construct_type(type_=SessionsCloseResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def screenshot(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionsScreenshotResponse:
        """
        Retrieve the screenshot of the session.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionsScreenshotResponse
            Successful Response

        Examples
        --------
        from multion.client import AsyncMultiOn

        client = AsyncMultiOn(
            api_key="YOUR_API_KEY",
        )
        await client.sessions.screenshot(
            session_id="session_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"screenshot/{jsonable_encoder(session_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SessionsScreenshotResponse, construct_type(type_=SessionsScreenshotResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> SessionsListResponse:
        """
        Retrieve a list of active session IDs.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionsListResponse
            Successful Response

        Examples
        --------
        from multion.client import AsyncMultiOn

        client = AsyncMultiOn(
            api_key="YOUR_API_KEY",
        )
        await client.sessions.list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "sessions", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SessionsListResponse, construct_type(type_=SessionsListResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
